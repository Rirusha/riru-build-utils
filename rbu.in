#!/usr/bin/env python3
'''
Copyright (C) 2024 Vladimir Vaskov

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program. If not, see <https://www.gnu.org/licenses/>.

SPDX-License-Identifier: GPL-3.0-or-later
'''


from subprocess import Popen
import sys

from riru_build_utils.cloner import Cloner
from riru_build_utils.constants import Constants
from riru_build_utils.creator import Creator
from riru_build_utils.initer import Initer
from riru_build_utils.tester import Tester
from riru_build_utils.updater import Updater
from riru_build_utils.utils import print_error


def print_help():
    print ('Usage:')
    print ('\trbu create <language> <project type>')
    print ('\trbu update <git url or alias name> [<tag>] [<task-id-root>] [--test]')
    print ('\trbu test [<working dir>] [--without-deps]')
    print ('\trbu clone [<names>] [--with-deps]|[--all]')
    print ('\trbu init <language> <project type> <name>')

def main():
    argv = sys.argv.copy()

    Constants.PKGDATADIR = "@pkgdatadir@"

    argv.pop(0)

    if len(argv) == 0:
        print('No command. Available: create, update, test, clone, init')
        print_help()
        return

    command = argv.pop(0)

    match command:
        case 'create':
            create(argv)
        case 'update':
            update(argv)
        case 'test':
            test(argv)
        case 'clone':
            clone(argv)
        case 'init':
            init(argv)
        case _:
            print (f'Unknown command: {command}')
            return

def create (argv:list[str]):
    language:str = None
    project_type:str = None

    if len(argv) > 0:
        language = argv.pop(0)

        if len(argv) > 0:
            project_type = argv.pop(0)

            if len(argv) > 0:
                print ('Too many args.')
                return

    if language is None or project_type is None:
        print (f"Not enough args.")
        return

    Creator(language, project_type).create()

def update (argv:list[str]):
    name:str|None = None
    tag:str|None = None
    task_root:str|None = None
    test:bool = False

    for arg in argv:
        if arg == '--test':
            test = True
            argv.remove(arg)

    if len(argv) > 0:
        name = argv.pop(0)

        if len(argv) > 0:
            tag = argv.pop(0)

            if len(argv) > 0:
                task_root = argv.pop(0)

                if len(argv) > 0:
                    print ('Too many args.')
                    return

    Updater(name, tag, task_root, test).update()

def test (argv:list[str]):
    working_dir:str|None = None
    without_deps = False

    for arg in argv:
        if arg == '--without-deps':
            without_deps = True
            argv.remove(arg)

    if len(argv) > 0:
        working_dir = argv.pop(0)

        if len(argv) > 0:
            print ('Too many args.')
            return

    Tester(working_dir, not without_deps, without_deps).test()
    
def clone (argv:list[str]):
    names:list[str]|None = None
    all_ = False

    for arg in argv:
        if arg == '--all':
            all_ = True
            argv.remove(arg)

    if len(argv) > 0:
        names = argv.copy()
        argv.clear()

    Cloner(names, all_).clone()

def init (argv:list[str]):
    language:str|None = None
    project_type:str|None = None
    name:str|None = None

    if len(argv) > 0:
        language = argv.pop(0)

        if len(argv) > 0:
            project_type = argv.pop(0)

            if len(argv) > 0:
                name = argv.pop(0)

                if len(argv) > 0:
                    print ('Too many args.')
                    return
            else:
                print_error('Not enough args.')
        else:
            print_error('Not enough args.')
    else:
        print_error('Not enough args.')
     
    Initer(language, project_type, name, path).init()


if __name__ == '__main__':
    main()
